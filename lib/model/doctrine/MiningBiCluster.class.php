<?php

/**
 * MiningBiCluster
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    MineVis
 * @subpackage model
 * @author     Patrick Fiaux
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class MiningBiCluster extends BaseMiningBiCluster {

    /**
     * Looks up the documents related to the cells in this bicluster
     * and return as list of those documents
     * @return array list of document ids
     */
    public function getDocuments() {
        /**
         * Make sure it's a jigsaw project
         */
        $config = $this->getProjectConfig();
        $project = $config->getProject();
        if ($project->getJigsawBased() != true) {
            return array();
        }
        $cells = $this->getCells();

        /**
         * Connect to db
         */
        $db = new MineVisDb($project->getExternalDatabase());

        /**
         * Get a list of the doc ids and add them to return array
         */
        $id_list = $db->getBiclusterDocuments($config, $cells);
        return $id_list;
    }

    /**
     * Get the rows and columns of this BiC
     * @return array a double array where the first element is an array of rows and the second an array of columns
     */
    public function getCells() {
        $bicluster_rows = $this->getRows();
        $bicluster_cols = $this->getCols();

        $bicluster = array();
        $bicluster[0] = array();
        $bicluster[1] = array();
        foreach ($bicluster_rows as $row) {
            $bicluster[0][$row->getRowId()] = $row->getRowId();
        }
        foreach ($bicluster_cols as $col) {
            $bicluster[1][$col->getColId()] = $col->getColId();
        }
        return $bicluster;
    }

    /**
     * This returns the full json with labels and all... MEMORY INTENSIVE
     * @return type
     */
    public function getFullJSON() {
        $config = $this->getProjectConfig();
        $mining = $this->getMining();

        //compile an easy to search array for iscellinbicluster
        $bicluster = $this->getCells();

        //get data from raw db
        $project = $mining->getProject();
        $db = new MineVisDb($project->getExternalDatabase());
        //load relationships
        $relationships = $db->getMappingMatrix(
                $config->getTableAxb(), $config->getTableAxbTableAIdField(), $config->getTableAxbTableBIdField()
        );

        //load rows
        $rows = $db->getTableADescription($config);
        //load cols
        $columns = $db->getTableBDescription($config);

        //format some json stuff
        $grid = array();
        foreach ($rows as $r) {
            $gridrow = array();
            foreach ($columns as $c) {
                if (isset($bicluster[0][$r[0]]) and isset($bicluster[1][$c[0]])) { //is in biclus
                    $gridrow[] = 2;
                } else if (isset($relationships[$r[0]]) &&
                        isset($relationships[$r[0]][$c[0]])) { //is in relationships
                    $gridrow[] = 1;
                } else { //is in biclus
                    $gridrow[] = 0;
                }
            }
            $grid[] = $gridrow;
        }
        $row_labels = array();
        foreach ($rows as $r) {
            $row_labels[] = array("row" => $r[0], "name" => $r[1]);
        }
        $col_labels = array();
        foreach ($columns as $c) {
            $col_labels[] = array("col" => $c[0], "name" => $c[1]);
        }

        $bic_data = array("grid" => $grid, "rows" => $row_labels, "cols" => $col_labels);
        $json = json_encode($bic_data);
        return $json;
    }

    /**
     * T his gets just the rows that are concerned. This isn't json encoded.
     * to get json encoded use getminiJSON, raw is used when it needs to be
     * encoded later.
     * @param boolean should the output be rotated? NOT IMPLEMENTED
     * @return string json code
     */
    public function getMiniRaw($rotation = false) {
        //Get minned info
        $bicluster_rows = $this->getRows();
        $bicluster_cols = $this->getCols();
        $config = $this->getProjectConfig();
        $mining = $this->getMining();

        $grid = array();
        foreach ($bicluster_rows as $r) {
            $gridrow = array();
            foreach ($bicluster_cols as $c) {
                $gridrow[] = 2;
            }
            $grid[] = $gridrow;
        }

        //connect to raw db to get labels
        $project = $mining->getProject();
        $db = new MineVisDb($project->getExternalDatabase());

        // Compile the rows
        $row_labels = array();
        $row_ids = array();
        foreach ($bicluster_rows as $row) {
            $row_ids[$row->getRowId()] = $row->getRowId();
        }
        $rows = $db->getTableADescriptionWhere($config, $row_ids);
        foreach ($rows as $r) {
            $row_labels[] = array("row" => $r[0], "name" => $r[1]);
        }

        // Compile the colums
        $col_labels = array();
        $col_ids = array();
        foreach ($bicluster_cols as $col) {
            $col_ids[$col->getColId()] = $col->getColId();
        }
        $columns = $db->getTableBDescriptionWhere($config, $col_ids);
        foreach ($columns as $c) {
            $col_labels[] = array("col" => $c[0], "name" => $c[1]);
        }

        $data = array(
            "type" => "bicluster",
            "id" => $this->getId(),
            "grid" => $grid,
            "rows" => $row_labels,
            "cols" => $col_labels,
            "row_type" => $config->getTableA(),
            "col_type" => $config->getTableB()
        );
        return $data;
    }

    /**
     * This gets just the rows that are concerned.
     * @param boolean should the output be rotated NOT IMPLEMENTED
     * @return string json code
     */
    public function getMiniJSON($rotation = false) {
        $json = json_encode($this->getMiniRaw($rotation));
        return $json;
    }

    /**
     * Checks for an entity in that biclusters' rows
     * @param int $entity entity id.
     * @return boolean true if contained false otherwise
     */
    public function rowContains($entity_id) {
        $pdo = Doctrine_Manager::getInstance()->getCurrentConnection()->getDbh();

        $query = "SELECT COUNT( id ) FROM mining_bi_cluster_row WHERE bicluster_id=" . $this->getId()
                . " AND row_id=" . $entity_id;
        $stmt = $pdo->prepare($query);
        $stmt->execute();
        $results = $stmt->fetch();

        if ($results[0] == "0") {
            /**
             * Entity not in bicluster
             */
            return false;
        } else {
            /**
             * Entity Found!
             */
            return true;
        }
    }

    /**
     * Checks for an entity in that biclusters' columns
     * @param int $entity entity id.
     * @return boolean true if contained false otherwise
     */
    public function columnContains($entity_id) {
        $pdo = Doctrine_Manager::getInstance()->getCurrentConnection()->getDbh();

        $query = "SELECT COUNT( id ) FROM mining_bi_cluster_col WHERE bicluster_id=" . $this->getId()
                . " AND col_id=" . $entity_id;
        $stmt = $pdo->prepare($query);
        $stmt->execute();
        $results = $stmt->fetch();

        if ($results[0] == "0") {
            /**
             * Entity not in bicluster
             */
            return false;
        } else {
            /**
             * Entity Found!
             */
            return true;
        }
    }

}
