<?php

/**
 * Mining
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    MineVis
 * @subpackage model
 * @author     Patrick Fiaux
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Mining extends BaseMining {

    private $status_codes = array('Pending', 'Running', 'Complete', 'Error');

    /**
     * Returns a text description for the status of the Document Linking
     * @return string Status description
     */
    public function getDocumentLinkingStatus() {
        return $this->status_codes[$this->getDocumentLinkStatus()];
    }

    /**
     * Returns a text description for the status of the EntityFrequencies
     * @return string Status description
     */
    public function getEntityFrequenciesStatus() {
        return $this->status_codes[$this->getEntityFrequencyStatus()];
    }



    /**
     * This function creates the MiningJobMappings for this job.
     */
    public function setupJobs() {
        $jobs = $this->getProject()->getProjectConfig();

        foreach ($jobs as $project_config) {
            $job = new MiningJobMapping();
            $job->setMining($this);
            $job->setProjectConfig($project_config);
            $job->save();
        }
    }

    /**
     * Returns parameters as associative array
     * if params aren't in json return empty array
     * @return assoc array
     */
    public function getParams() {
        $json = json_decode($this->getParam(), true);
        return (is_array($json)) ? $json : array();
    }

    /**
     * Takes the parameters associative array and converts it
     * to a text format
     * param1=x, param2=y ...
     * if params aren't in json returns ''.
     * @return string
     */
    public function paramsToString() {
        $str = '';
        $json = $this->getParams();
        if (is_array($json)) {
            foreach ($json as $key => $val) {
                $str .= $key . '=' . $val . ', ';
            }
        }
        return $str;
    }

    /**
     * This is an optimized count function, returns straight count with single query.
     * @return int number of biclusters for this mining
     */
    public function biClusterCount() {
        $q = Doctrine_Core::getTable('MiningBiCluster')
                ->createQuery('b')
                ->select('COUNT(*)')
                ->where('b.mining_id = ?', $this->getId());
        $count = $q->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
        return $count;
    }

    /**
     * Gets the name of the algorithm.
     * @return string Algorithm name
     */
    public function getAlgorithmName() {
        $algorithms = Doctrine_Core::getTable('Mining')->getMiningAlgorithms();
        return $algorithms[$this->getAlgorithm()];
    }

    /**
     * Override delete to remove output files for this mining before deleting it.
     *
     * @param Doctrine_Connection $conn default
     * @return default
     */
    public function delete(Doctrine_Connection $conn = null) {
        /*
         * load data
         */
        $sfRoot = sfConfig::get('sf_root_dir');
        $algorithm = $this->getAlgorithmName();
        $jobs = $this->getJobMappings();

        /*
         * Delete logs for the mining
         */
        $logs = $algorithm::getLogPaths($this);
        $this->deleteArrayHelper($sfRoot, $logs);

        /*
         * Delete files made for each mining job
         */
        foreach ($jobs as $job) {
            //get output files to delete for this algorithm
            $outputs = $algorithm::getOutputPaths($job);
            $this->deleteArrayHelper($sfRoot, $outputs);
        }

        return parent::delete($conn);
    }

    /**
     * Small helper function. Deletes all the files pointed to in the array.
     * @param array $files_to_delete
     */
    private function deleteArrayHelper($sfRoot, $files_to_delete) {
        foreach ($files_to_delete as $file_name) {
                $file_path = $sfRoot . $file_name;
                //exec('echo "trying to delete: ' . $file_path . '" >> ' . $sfRoot . '/delete.log');
                if (file_exists($file_path)) {
                    unlink($file_path);
                }
            }
    }

}
